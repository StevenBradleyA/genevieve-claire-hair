generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Review {
    id         String   @id @default(cuid())
    text       String
    starRating Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    userId    String
    bookingId String

    user    User    @relation(fields: [userId], references: [id])
    booking Booking @relation(fields: [bookingId], references: [id])
}

model Booking {
    id        String   @id @default(cuid())
    startDate DateTime
    endDate   DateTime
    status    String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String

    user        User          @relation(fields: [userId], references: [id])
    review      Review[]
    transaction Transaction[]
}

model Transaction {
    id     String @id @default(cuid())
    cost   Int
    type   String
    status String

    userId    String
    bookingId String?

    user    User     @relation(fields: [userId], references: [id])
    booking Booking? @relation(fields: [bookingId], references: [id])
}

model Images {
    id           String   @id @default(cuid())
    link         String
    resourceType String
    resourceId   String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    userId String

    user User @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    firstName     String?
    lastName      String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    notes         String?
    isAdmin       Boolean   @default(false)
    isNew         Boolean   @default(true)

    accounts     Account[]
    sessions     Session[]
    reviews      Review[]
    bookings     Booking[]
    transactions Transaction[]
    images       Images[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
